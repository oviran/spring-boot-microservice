pipeline {
    agent any

     environment {
            SSH_CREDENTIALS_ID = "oviran-prod-server"
            SSH_TARGET = "ubuntu@100.29.62.22"
            DOCKER_CONTAINER = "ABCCompany"
            SONARQUBE_URL = "https://sonarqube.oviran.shop/"
            SONARQUBE_TOKEN = credentials('SonarQube-credential')
            PATH = "/usr/local/bin:$PATH"
            SCANNER_HOME = tool 'sonar-scanner'
     }

    tools {
        maven 'Maven 3.9.7'
        nodejs 'NodeJS 22.9.0'
    }

    stages {

         stage('Git Checkout') {
                    steps {
                       git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/oviran/Micro-Service.git'
                    }
         }

        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }

        stage('SonarQube Analysis') {
               steps {
                   withSonarQubeEnv('sonar') {
                        sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=spring-boot-microservice -Dsonar.projectName=spring-boot-microservice -Dsonar.java.binaries=.'''
                   }
              }
        }
        stage('Build') {
                    steps {
                       sh "mvn package"
                    }
        }

        stage('Publish To Nexus') {
            steps {
               withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }
        }
        stage('apigateway') {
                    steps {
                        script{
                            withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                                  dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/apigateway/') {
                                         sh "docker build -t oshadha96/apigateway:latest ."
                                         sh "docker push oshadha96/apigateway:latest"
                                         sh " docker rmi oshadha96/apigateway:latest"
                                }
                            }
                        }
                    }
        }
        stage('discoveryserver') {
                                    steps {
                                        script{
                                            withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                                                  dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/discoveryserver/') {
                                                         sh "docker build -t oshadha96/discoveryserver:latest ."
                                                         sh "docker push oshadha96/discoveryserver:latest"
                                                         sh " docker rmi oshadha96/discoveryserver:latest"
                                                }
                                            }
                                        }
                                    }
                        }

        stage('inventory') {
                                    steps {
                                        script{
                                            withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                                                  dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/inventory/') {
                                                         sh "docker build -t oshadha96/inventory:latest ."
                                                         sh "docker push oshadha96/inventory:latest"
                                                         sh " docker rmi oshadha96/inventory:latest"
                                                }
                                            }
                                        }
                                    }
                        }

        stage('order') {
                                    steps {
                                        script{
                                            withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                                                  dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/order/') {
                                                         sh "docker build -t oshadha96/order:latest ."
                                                         sh "docker push oshadha96/order:latest"
                                                         sh " docker rmi oshadha96/order:latest"
                                                }
                                            }
                                        }
                                    }
                        }

        stage('product') {
                                    steps {
                                        script{
                                            withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                                                  dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/product/') {
                                                         sh "docker build -t oshadha96/product:latest ."
                                                         sh "docker push oshadha96/product:latest"
                                                         sh " docker rmi oshadha96/product:latest"
                                                }
                                            }
                                        }
                                    }
                        }

        stage('Docker Image Scan') {
                        steps {
                            sh "trivy image --format table -o trivy-image-report.html adijaiswal/boardshack:latest "
                        }
        }

        stage('Deploy To Kubernetes') {
                        steps {
                            withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'EKS-1', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', serverUrl: 'https://9F39F577334FF23706994135261985F2.gr7.ap-south-1.eks.amazonaws.com']]) {
                                sh "kubectl apply -f deployment-service.yml"

                            }
                        }
                    }

        stage('verify Deployment') {
            steps {
                withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'EKS-1', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', serverUrl: 'https://9F39F577334FF23706994135261985F2.gr7.ap-south-1.eks.amazonaws.com']]) {
                    sh "kubectl get svc -n webapps"
                }
            }
        }
        stage('K8-Deploy') {
                steps {
                    withKubeConfig(caCertificate: '', clusterName: 'my-eks8', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://2BCD568E04EC6456125F85067AFE81B9.gr7.ap-south-1.eks.amazonaws.com') {
                             sh 'kubectl apply -f deployment-service.yml'
                             sh 'kubectl get pods '
                             sh 'kubectl get svc'
                    }
                }
        }

    }


    post {
        always {
            cleanWs()
        }

        success {
            emailext (
                            to: 'oviran@gmail.com',
                            subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """<p>Good news! The job <b>${env.JOB_NAME}</b> build <b>${env.BUILD_NUMBER}</b> succeeded. <b> <p>Check the <a href="${BUILD_URL}">console output</a>.</p></b></p>""",
                            replyTo: 'noreply@oviran.shop',
                            from: 'noreply@oviran.shop'
                      )
        }


        failure {
            emailext (
                            to: 'oviran@gmail.com',
                            subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                            body: """<p>Unfortunately, the job <b>${env.JOB_NAME}</b> build <b>${env.BUILD_NUMBER}</b> failed.</p>""",
                            replyTo: 'noreply@oviran.shop',
                            from: 'noreply@oviran.shop'
                      )
        }

    }




}