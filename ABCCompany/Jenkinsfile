pipeline {
    agent any

     environment {
            SCANNER_HOME = tool 'sonar-scanner'

     }

    tools {
        maven 'Maven_3.8.7'
        jdk 'jdk17'

    }

    stages {

         stage('Git Checkout') {
                    steps {
                       git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/oviran/spring-boot-microservice.git'
                    }
        }
        stage('Compile') {
            steps {
                dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany') {
                    sh "mvn compile"
                }
            }
        }

        stage('Test') {
            steps {
                dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany') {
                    sh "mvn test"
                }
            }
        }

        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }

        stage('SonarQube Analysis') {
              steps {

                    withSonarQubeEnv('sonar') {
                         sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=spring-boot-microservice -Dsonar.projectName=spring-boot-microservice -Dsonar.java.binaries=.'''
                    }

              }
        }

        stage('Build') {
            steps {
                dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany') {
                    sh "mvn package"
                }
            }
        }

        stage('Publish To Nexus') {
            steps {
                dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany') {
                    withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'Maven_3.8.7', mavenSettingsConfig: '', traceability: true) {
                        sh "mvn deploy -DaltDeploymentRepository=maven-snapshots::default::http://100.24.30.80:8081/repository/maven-snapshots/"
                    }
                }
            }
        }



        stage('apigateway') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                          dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/apigateway/') {
                                 sh "docker build -t oshadha96/apigateway:latest ."
                                 sh "docker push oshadha96/apigateway:latest"
                                 sh " docker rmi oshadha96/apigateway:latest"
                        }
                    }
                }
            }
        }

        stage('discoveryserver') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                          dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/discoveryserver/') {
                                 sh "docker build -t oshadha96/discoveryserver:latest ."
                                 sh "docker push oshadha96/discoveryserver:latest"
                                 sh " docker rmi oshadha96/discoveryserver:latest"
                        }
                    }
                }
            }
        }

        stage('inventory') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                          dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/inventory/') {
                                 sh "docker build -t oshadha96/inventory:latest ."
                                 sh "docker push oshadha96/inventory:latest"
                                 sh " docker rmi oshadha96/inventory:latest"
                        }
                    }
                }
            }
        }

        stage('order') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                          dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/order/') {
                                 sh "docker build -t oshadha96/order:latest ."
                                 sh "docker push oshadha96/order:latest"
                                 sh " docker rmi oshadha96/order:latest"
                        }
                    }
                }
            }
        }

        stage('product') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                          dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany/product/') {
                                 sh "docker build -t oshadha96/product:latest ."
                                 sh "docker push oshadha96/product:latest"
                                 sh " docker rmi oshadha96/product:latest"
                        }
                    }
                }
            }
        }

        stage('Deploy To Kubernetes') {
            steps {
                withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'my-eks', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', serverUrl: 'https://D03C8A97CCB1726561F0334EC466F4A5.gr7.us-east-1.eks.amazonaws.com']]) {
                    dir('/var/lib/jenkins/workspace/spring-boot-microservice/ABCCompany') {
                        sh "kubectl apply -f kubernetes-manifests.yaml"
                    }
                }
            }
        }

        stage('Verify the Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'my-eks', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://D03C8A97CCB1726561F0334EC466F4A5.gr7.us-east-1.eks.amazonaws.com') {
                         sh 'kubectl get pods -n webapps'
                         sh 'kubectl get svc -n webapps'
                }
            }
        }

    }


}